using System.Linq;
using GraphQL.Types;
using ISS.Application.Models;
using ISS.Application.Helpers;
using ISS.GraphQL.ServiceExtentions;
using ISS.Application.Dto;

namespace ISS.GraphQL.Type
{
    public class CotacaoType : ObjectGraphType<Cotacao>
    {
        public CotacaoType()
        {
            // Defining the name of the object
            Name = "cotacao";

            Field(x => x.IdCotacao, nullable: true);
            Field(x => x.Obs, nullable: true);
            Field(x => x.DataEmissao, nullable: true, type: typeof(DateTimeGraphType));
            Field(x => x.EstadoId, nullable: true);
            Field(x => x.ProdutorId, nullable: true);
            Field(x => x.CanalId, nullable: true);
            Field(x => x.ActividadeContratadaId, nullable: true);
            Field(x => x.FraccionamentoId, nullable: true);
            Field(x => x.CaminhoFicheiro, nullable: true);
            Field(x => x.FormasCobrancaId, nullable: true);
            Field(x => x.BalcaoId, nullable: true);
            Field(x => x.PessoasAbrangidasId, nullable: true);
            Field(x => x.LugaresAutoAssegurarId, nullable: true);
            Field(x => x.FormaLiquidacaoPremioId, nullable: true);
            Field(x => x.PercentagemMinimaPremio, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.ValorMinimoPremio, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PremioBase, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PremioSimples, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PremioRisco, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PremioComercial, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PremioTotal, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PremioBruto, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.Iva, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.Arseg, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PrazoAceitacao, nullable: true, type: typeof(IntGraphType));
            Field(x => x.FormaContratacaoId, nullable: true);
            Field(x => x.PrazoCurtoId, nullable: true);
            Field(x => x.DuracaoTipoContratoId, nullable: true);
            Field(x => x.DataInicio, nullable: true, type: typeof(DateTimeGraphType));
            Field(x => x.DataExpiracao, nullable: true, type: typeof(DateTimeGraphType));
            Field(x => x.QualidadeEmQueSeguraId, nullable: true);
            Field(x => x.TipoSeguroGrupoId, nullable: true);
            Field(x => x.DataCriacao, nullable: true, type: typeof(DateTimeGraphType));
            Field(x => x.DataAtualizacao, nullable: true, type: typeof(DateTimeGraphType));
            Field(x => x.UltModificacaoPorId, nullable: true);
            Field(x => x.CodCotacao, nullable: true);
            Field(x => x.DataEntrada, nullable: true, type: typeof(DateTimeGraphType));
            Field(x => x.DataAceitacao, nullable: true, type: typeof(DateTimeGraphType));
            Field(x => x.ResponsavelAceitacaoId, nullable: true);
            Field(x => x.OutraSeguradora, nullable: true, type: typeof(BooleanGraphType));
            Field(x => x.CobradorId, nullable: true);
            Field(x => x.PessoaContactoId, nullable: true);
            Field(x => x.TomadorId, nullable: true);
            Field(x => x.CotacaoId, nullable: true);
            Field(x => x.LocalCobrancaId, nullable: true);
            Field(x => x.LocalRiscoEmpresaId, nullable: true);
            Field(x => x.CapitalSeguro, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.FranquiaId, nullable: true);
            Field(x => x.MoedaId, nullable: true);
            Field(x => x.LimiteResponsabilidade, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.EncargosAdministrativos, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.CentroResponsabilidadeId, nullable: true);
            Field(x => x.NumFraccao, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.CentroCustoId, nullable: true);
            Field(x => x.TipoDocumentoId, nullable: true);
            Field(x => x.DocumentoParcelado, nullable: true);
            Field(x => x.Impostos, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.Descontos, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.Agravamentos, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.Despesas, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.Ofertas, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.Comissoes, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.AgravamentosPorIdade, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.DescontosPorIdade, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.PeriodoPlanoId, nullable: true);
            Field(x => x.FormaPagamentoId, nullable: true);
            Field(x => x.ModalidadeSeguroId, nullable: true);
            Field(x => x.ClassificacaoGrupoId, nullable: true);
            Field(x => x.TipoSeguroId, nullable: true);
            Field(x => x.NumFuncionarios, nullable: true, type: typeof(IntGraphType));
            Field(x => x.MassaSalarial, nullable: true, type: typeof(FloatGraphType));
            Field(x => x.CaeId, nullable: true);
            Field(x => x.NumOrdem, nullable: true, type: typeof(IntGraphType));
            Field(x => x.ReferenciaCotacao, nullable: true);
            FieldAsync<ActividadeContratadaType>("actividadeContratada", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<ActividadeContratada>(c.Source.ActividadeContratadaId)));
            FieldAsync<BalcaoType>("balcao", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Balcao>(c.Source.BalcaoId)));
            FieldAsync<CaeType>("cae", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Cae>(c.Source.CaeId)));
            FieldAsync<CanalType>("canal", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Canal>(c.Source.CanalId)));
            FieldAsync<CentroCustoType>("centroCusto", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<CentroCusto>(c.Source.CentroCustoId)));
            FieldAsync<CentroResponsabilidadeType>("centroResponsabilidade", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<CentroResponsabilidade>(c.Source.CentroResponsabilidadeId)));
            FieldAsync<ClassificacaoGrupoType>("classificacaoGrupo", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<ClassificacaoGrupo>(c.Source.ClassificacaoGrupoId)));
            FieldAsync<PessoaType>("cobrador", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Pessoa>(c.Source.CobradorId)));
            FieldAsync<DuracaoTipoContratoType>("duracaoTipoContrato", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<DuracaoTipoContrato>(c.Source.DuracaoTipoContratoId)));
            FieldAsync<EstadoType>("estado", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Estado>(c.Source.EstadoId)));
            FieldAsync<FormaContratacaoType>("formaContratacao", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<FormaContratacao>(c.Source.FormaContratacaoId)));
            FieldAsync<FormaLiquidacaoPremioType>("formaLiquidacaoPremio", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<FormaLiquidacaoPremio>(c.Source.FormaLiquidacaoPremioId)));
            FieldAsync<FormaPagamentoType>("formaPagamento", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<FormaPagamento>(c.Source.FormaPagamentoId)));
            FieldAsync<FormasCobrancaType>("formasCobranca", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<FormasCobranca>(c.Source.FormasCobrancaId)));
            FieldAsync<FraccionamentoType>("fraccionamento", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Fraccionamento>(c.Source.FraccionamentoId)));
            FieldAsync<FranquiaType>("franquia", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Franquia>(c.Source.FranquiaId)));
            FieldAsync<EnderecoType>("localCobranca", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Endereco>(c.Source.LocalCobrancaId)));
            FieldAsync<EnderecoType>("localRiscoEmpresa", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Endereco>(c.Source.LocalRiscoEmpresaId)));
            FieldAsync<LugaresAutoAssegurarType>("lugaresAutoAssegurar", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<LugaresAutoAssegurar>(c.Source.LugaresAutoAssegurarId)));
            FieldAsync<ModalidadeSeguroType>("modalidadeSeguro", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<ModalidadeSeguro>(c.Source.ModalidadeSeguroId)));
            FieldAsync<MoedaType>("moeda", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Moeda>(c.Source.MoedaId)));
            FieldAsync<PeriodoPlanoType>("periodoPlano", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<PeriodoPlano>(c.Source.PeriodoPlanoId)));
            FieldAsync<PessoaType>("pessoaContacto", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Pessoa>(c.Source.PessoaContactoId)));
            FieldAsync<PessoasAbrangidasType>("pessoasAbrangidas", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<PessoasAbrangidas>(c.Source.PessoasAbrangidasId)));
            FieldAsync<PrazosCurtosType>("prazoCurto", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<PrazosCurtos>(c.Source.PrazoCurtoId)));
            FieldAsync<PessoaType>("produtor", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Pessoa>(c.Source.ProdutorId)));
            FieldAsync<QualidadeSeguraType>("qualidadeEmQueSegura", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<QualidadeSegura>(c.Source.QualidadeEmQueSeguraId)));
            FieldAsync<PessoaType>("responsavelAceitacao", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Pessoa>(c.Source.ResponsavelAceitacaoId)));
            FieldAsync<TipoDocumentosType>("tipoDocumento", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<TipoDocumentos>(c.Source.TipoDocumentoId)));
            FieldAsync<TipoSeguroType>("tipoSeguro", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<TipoSeguro>(c.Source.TipoSeguroId)));
            FieldAsync<TipoSeguroGrupoType>("tipoSeguroGrupo", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<TipoSeguroGrupo>(c.Source.TipoSeguroGrupoId)));
            FieldAsync<PessoaType>("tomador", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Pessoa>(c.Source.TomadorId)));
            FieldAsync<ListGraphType<BeneficiarioType>>("beneficiario", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Beneficiario>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<CoberturaSelecionadaType>>("coberturaSelecionada", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<CoberturaSelecionada>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<ConstrucaoType>>("construcao", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Construcao>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<CotacaoDependenteType>>("cotacaoDependente", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<CotacaoDependente>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<DescontoSeleccionadoType>>("descontoSeleccionado", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<DescontoSeleccionado>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<DespesaSeleccionadaType>>("despesaSeleccionada", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<DespesaSeleccionada>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<FranquiaSeleccionadoType>>("franquiaSeleccionado", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<FranquiaSeleccionado>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<InstalacoesType>>("instalacoes", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Instalacoes>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<MargemVendaSeleccionadoType>>("margemVendaSeleccionado", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<MargemVendaSeleccionado>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<MembroAsseguradoType>>("membroAssegurado", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<MembroAssegurado>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<ObjectoSeguradoType>>("objectoSegurado", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<ObjectoSegurado>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<OutrosContratosApoliceType>>("outrosContratosApolice", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<OutrosContratosApolice>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<QuestionarioType>>("questionario", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Questionario>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<RendimentosPessoaType>>("rendimentosPessoa", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<RendimentosPessoa>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<SimulacaoDependenteType>>("simulacaoDependente", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<SimulacaoDependente>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            FieldAsync<ListGraphType<ViagemType>>("viagem", resolve: async c => c.Resolve(await c.GetRepository().GetAsync<Viagem>(x => x.Where(e => e.HasValue(c.Source.IdCotacao)))));
            
        }
    }

    public class CotacaoInputType : InputObjectGraphType
	{
		public CotacaoInputType()
		{
			// Defining the name of the object
			Name = "cotacaoInput";
			
            //Field<StringGraphType>("idCotacao");
			Field<StringGraphType>("obs");
			Field<DateTimeGraphType>("dataEmissao");
			Field<StringGraphType>("estadoId");
			Field<StringGraphType>("produtorId");
			Field<StringGraphType>("canalId");
			Field<StringGraphType>("actividadeContratadaId");
			Field<StringGraphType>("fraccionamentoId");
			Field<StringGraphType>("caminhoFicheiro");
			Field<StringGraphType>("formasCobrancaId");
			Field<StringGraphType>("balcaoId");
			Field<StringGraphType>("pessoasAbrangidasId");
			Field<StringGraphType>("lugaresAutoAssegurarId");
			Field<StringGraphType>("formaLiquidacaoPremioId");
			Field<FloatGraphType>("percentagemMinimaPremio");
			Field<FloatGraphType>("valorMinimoPremio");
			Field<FloatGraphType>("premioBase");
			Field<FloatGraphType>("premioSimples");
			Field<FloatGraphType>("premioRisco");
			Field<FloatGraphType>("premioComercial");
			Field<FloatGraphType>("premioTotal");
			Field<FloatGraphType>("premioBruto");
			Field<FloatGraphType>("iva");
			Field<FloatGraphType>("arseg");
			Field<IntGraphType>("prazoAceitacao");
			Field<StringGraphType>("formaContratacaoId");
			Field<StringGraphType>("prazoCurtoId");
			Field<StringGraphType>("duracaoTipoContratoId");
			Field<DateTimeGraphType>("dataInicio");
			Field<DateTimeGraphType>("dataExpiracao");
			Field<StringGraphType>("qualidadeEmQueSeguraId");
			Field<StringGraphType>("tipoSeguroGrupoId");
			Field<DateTimeGraphType>("dataCriacao");
			Field<DateTimeGraphType>("dataAtualizacao");
			Field<StringGraphType>("ultModificacaoPorId");
			Field<StringGraphType>("codCotacao");
			Field<DateTimeGraphType>("dataEntrada");
			Field<DateTimeGraphType>("dataAceitacao");
			Field<StringGraphType>("responsavelAceitacaoId");
			Field<BooleanGraphType>("outraSeguradora");
			Field<StringGraphType>("cobradorId");
			Field<StringGraphType>("pessoaContactoId");
			Field<StringGraphType>("tomadorId");
			Field<StringGraphType>("cotacaoId");
			Field<StringGraphType>("localCobrancaId");
			Field<StringGraphType>("localRiscoEmpresaId");
			Field<FloatGraphType>("capitalSeguro");
			Field<StringGraphType>("franquiaId");
			Field<StringGraphType>("moedaId");
			Field<FloatGraphType>("limiteResponsabilidade");
			Field<FloatGraphType>("encargosAdministrativos");
			Field<StringGraphType>("centroResponsabilidadeId");
			Field<FloatGraphType>("numFraccao");
			Field<StringGraphType>("centroCustoId");
			Field<StringGraphType>("tipoDocumentoId");
			Field<StringGraphType>("documentoParcelado");
			Field<FloatGraphType>("impostos");
			Field<FloatGraphType>("descontos");
			Field<FloatGraphType>("agravamentos");
			Field<FloatGraphType>("despesas");
			Field<FloatGraphType>("ofertas");
			Field<FloatGraphType>("comissoes");
			Field<FloatGraphType>("agravamentosPorIdade");
			Field<FloatGraphType>("descontosPorIdade");
			Field<StringGraphType>("periodoPlanoId");
			Field<StringGraphType>("formaPagamentoId");
			Field<StringGraphType>("modalidadeSeguroId");
			Field<StringGraphType>("classificacaoGrupoId");
			Field<StringGraphType>("tipoSeguroId");
			Field<IntGraphType>("numFuncionarios");
			Field<FloatGraphType>("massaSalarial");
			Field<StringGraphType>("caeId");
			Field<IntGraphType>("numOrdem");
			Field<StringGraphType>("referenciaCotacao");
			Field<ActividadeContratadaInputType>("actividadeContratada");
			Field<BalcaoInputType>("balcao");
			Field<CaeInputType>("cae");
			Field<CanalInputType>("canal");
			Field<CentroCustoInputType>("centroCusto");
			Field<CentroResponsabilidadeInputType>("centroResponsabilidade");
			Field<ClassificacaoGrupoInputType>("classificacaoGrupo");
			Field<PessoaInputType>("cobrador");
			Field<DuracaoTipoContratoInputType>("duracaoTipoContrato");
			Field<EstadoInputType>("estado");
			Field<FormaContratacaoInputType>("formaContratacao");
			Field<FormaLiquidacaoPremioInputType>("formaLiquidacaoPremio");
			Field<FormaPagamentoInputType>("formaPagamento");
			Field<FormasCobrancaInputType>("formasCobranca");
			Field<FraccionamentoInputType>("fraccionamento");
			Field<FranquiaInputType>("franquia");
			Field<EnderecoInputType>("localCobranca");
			Field<EnderecoInputType>("localRiscoEmpresa");
			Field<LugaresAutoAssegurarInputType>("lugaresAutoAssegurar");
			Field<ModalidadeSeguroInputType>("modalidadeSeguro");
			Field<MoedaInputType>("moeda");
			Field<PeriodoPlanoInputType>("periodoPlano");
			Field<PessoaInputType>("pessoaContacto");
			Field<PessoasAbrangidasInputType>("pessoasAbrangidas");
			Field<PrazosCurtosInputType>("prazoCurto");
			Field<PessoaInputType>("produtor");
			Field<QualidadeSeguraInputType>("qualidadeEmQueSegura");
			Field<PessoaInputType>("responsavelAceitacao");
			Field<TipoDocumentosInputType>("tipoDocumento");
			Field<TipoSeguroInputType>("tipoSeguro");
			Field<TipoSeguroGrupoInputType>("tipoSeguroGrupo");
			Field<PessoaInputType>("tomador");
			Field<ListGraphType<BeneficiarioInputType>>("beneficiario");
			Field<ListGraphType<CoberturaSelecionadaInputType>>("coberturaSelecionada");
			Field<ListGraphType<ConstrucaoInputType>>("construcao");
			Field<ListGraphType<CotacaoDependenteInputType>>("cotacaoDependente");
			Field<ListGraphType<DescontoSeleccionadoInputType>>("descontoSeleccionado");
			Field<ListGraphType<DespesaSeleccionadaInputType>>("despesaSeleccionada");
			Field<ListGraphType<FranquiaSeleccionadoInputType>>("franquiaSeleccionado");
			Field<ListGraphType<InstalacoesInputType>>("instalacoes");
			Field<ListGraphType<MargemVendaSeleccionadoInputType>>("margemVendaSeleccionado");
			Field<ListGraphType<MembroAsseguradoInputType>>("membroAssegurado");
			Field<ListGraphType<ObjectoSeguradoInputType>>("objectoSegurado");
			Field<ListGraphType<OutrosContratosApoliceInputType>>("outrosContratosApolice");
			Field<ListGraphType<QuestionarioInputType>>("questionario");
			Field<ListGraphType<RendimentosPessoaInputType>>("rendimentosPessoa");
			Field<ListGraphType<SimulacaoDependenteInputType>>("simulacaoDependente");
			Field<ListGraphType<ViagemInputType>>("viagem");
			
		}
	}
}